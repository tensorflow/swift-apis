// Copyright 2020 The TensorFlow Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

% counts = range(2, 11)

import XCTest
import TensorFlow

final class SequentialTests: XCTestCase {
  % for count in counts:
  func testSequential${count}() {
    let input = Float(1)
    let model = Sequential {
      % for i in range(1, count + 1):
      Multiply(coefficient: ${i})
      % end
    }

    let (output, (gInput, gModel)) = valueWithGradient(at: input, model) {
      $1($0)
    }

    XCTAssertEqual(Float(factorial(${count})), output)
    XCTAssertEqual(Float(factorial(${count})), gInput)
    % for i in range(1, count + 1):
    let gModel${i} = gModel${''.join(['.layer2' for _ in range(i - 1)])}${'.layer1' if i < count else ''}
    XCTAssertEqual(Float(factorial(${count}) / ${i}), gModel${i}.coefficient)
    % end
  }
  % end

  static var allTests = [
    % for count in counts:
    ("testSequential${count}", testSequential${count}),
    % end
  ]
}
