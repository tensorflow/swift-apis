/*
 * Copyright 2020 TensorFlow Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef X10_XLA_CLIENT_XLA_UTIL_H_
#define X10_XLA_CLIENT_XLA_UTIL_H_

#include <string>

#include "absl/types/span.h"
#include "tensorflow/compiler/xla/client/xla_computation.h"
#include "tensorflow/compiler/xla/service/hlo.pb.h"
#include "tensorflow/compiler/xla/service/hlo_module.h"
#include "tensorflow/compiler/xla/status_macros.h"
#include "tensorflow/compiler/xla/xla_client/types.h"

namespace xla {
namespace util {

// Creates the HLO module which is generated by the input PB message.
StatusOr<std::unique_ptr<HloModule>> CreateModuleFromProto(
    const HloModuleProto& proto,
    const DebugOptions& debug_options = DebugOptions());

// Returns a textual representation of the input XLA computation.
StatusOr<std::string> GetComputationHloText(const XlaComputation& computation);

void ReportComputationError(
    const Status& status, absl::Span<const XlaComputation* const> computations,
    absl::Span<const Shape* const> output_shapes);

// Checks whether an action on the given computation generated an error, and if
// that was the case, emit error and computations HLO text.
void CheckComputationStatus(
    const Status& status, absl::Span<const XlaComputation* const> computations,
    absl::Span<const Shape* const> output_shapes);

hash_t ShapeHash(const Shape& shape);

}  // namespace util
}  // namespace xla

#endif  // X10_XLA_CLIENT_XLA_UTIL_H_
