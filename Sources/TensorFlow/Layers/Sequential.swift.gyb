// Copyright 2019 The TensorFlow Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// A layer that sequentially composes two or more other layers.
///
/// ### Examples: ###
///
/// - Build a simple 2-layer perceptron model for MNIST:
///
/// ````
/// let inputSize = 28 * 28
/// let hiddenSize = 300
/// var classifier = Sequential {
///      Dense<Float>(inputSize: inputSize, outputSize: hiddenSize, activation: relu)
///      Dense<Float>(inputSize: hiddenSize, outputSize: 3, activation: identity)
///  }
/// ````
///
/// - Build an autoencoder for MNIST:
///
/// ````
/// var autoencoder = Sequential {
///     // The encoder.
///     Dense<Float>(inputSize: 28 * 28, outputSize: 128, activation: relu)
///     Dense<Float>(inputSize: 128, outputSize: 64, activation: relu)
///     Dense<Float>(inputSize: 64, outputSize: 12, activation: relu)
///     Dense<Float>(inputSize: 12, outputSize: 3, activation: relu)
///     // The decoder.
///     Dense<Float>(inputSize: 3, outputSize: 12, activation: relu)
///     Dense<Float>(inputSize: 12, outputSize: 64, activation: relu)
///     Dense<Float>(inputSize: 64, outputSize: 128, activation: relu)
///     Dense<Float>(inputSize: 128, outputSize: imageHeight * imageWidth, activation: tanh)
/// }
/// ````
public struct Sequential<Layer1: Module, Layer2: Layer>: Module
    where Layer1.Output == Layer2.Input,
          Layer1.TangentVector.VectorSpaceScalar == Layer2.TangentVector.VectorSpaceScalar {
    public var layer1: Layer1
    public var layer2: Layer2

    public init(_ layer1: Layer1, _ layer2: Layer2) {
        self.layer1 = layer1
        self.layer2 = layer2
    }

    @differentiable(wrt: self)
    public func callAsFunction(_ input: Layer1.Input) -> Layer2.Output {
        layer2(layer1(input))
    }

    public init(@LayerBuilder layers: () -> Self) {
        self = layers()
    }
}

extension Sequential: Layer where Layer1: Layer {
    @differentiable
    public func callAsFunction(_ input: Layer1.Input) -> Layer2.Output {
        layer2(layer1(input))
    }
}

%{
SEQUENTIAL_ARITY_RANGE = range(3, 11)

def generic_parameters(arity, prefix=""):
    params = ["L1: Module"]
    params += ["L{}: Layer".format(i) for i in range(2, arity+1)]
    return prefix.join(params)

# Returns "Sequential<L1, Sequential<L2, ...>>".
def sequential_type(arity):
    return (
        "".join(["Sequential<L{}, ".format(i) for i in range(1, n)])
        + "L"
        + str(arity)
        + "".join([">" for i in range(1, n)])
    )
}%

%for n in SEQUENTIAL_ARITY_RANGE:
/// A layer that sequentially composes ${n} layers.
public typealias Sequential${n}<${generic_parameters(n, ", ")}> = ${sequential_type(n)}
  where ${", ".join(["L{}.Output == L{}.Input".format(i, i+1) for i in range(1, n)])},
        ${", ".join(["L{}.TangentVector.VectorSpaceScalar == L{}.TangentVector.VectorSpaceScalar".format(i, i+1) for i in range(1, n)])}

%end

@_functionBuilder
public struct LayerBuilder {
    public static func buildBlock<L1: Module, L2: Layer>(_ l1: L1, _ l2: L2) -> Sequential<L1, L2>
        where L1.Output == L2.Input {
        Sequential(l1, l2)
    }

    %for n in SEQUENTIAL_ARITY_RANGE:
    public static func buildBlock<
        ${generic_parameters(n, prefix=",\n        ")}
    >(${", ".join(["_ l{}: L{}".format(i, i) for i in range(1, n+1)])})
        -> ${sequential_type(n)} where
        ${",\n        ".join(["L{}.Output == L{}.Input".format(i, i+1)
                          for i in range(1, n)])},
        ${",\n        ".join(["L{}.TangentVector.VectorSpaceScalar == ".format(i) +
                          "L{}.TangentVector.VectorSpaceScalar".format(i+1)
                          for i in range(1, n)])}
    {
        ${"".join(["Sequential(l{}, ".format(i) for i in range(1, n)])}l${n}${"".join([")" for _ in range(1, n)])}
    }

    %end
}
